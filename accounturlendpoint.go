// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package imagekit

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/stainless-sdks/imagekit-go/internal/apijson"
	"github.com/stainless-sdks/imagekit-go/internal/requestconfig"
	"github.com/stainless-sdks/imagekit-go/option"
	"github.com/stainless-sdks/imagekit-go/packages/param"
	"github.com/stainless-sdks/imagekit-go/packages/respjson"
	"github.com/stainless-sdks/imagekit-go/shared/constant"
)

// AccountURLEndpointService contains methods and other services that help with
// interacting with the ImageKit API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAccountURLEndpointService] method instead.
type AccountURLEndpointService struct {
	Options []option.RequestOption
}

// NewAccountURLEndpointService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewAccountURLEndpointService(opts ...option.RequestOption) (r AccountURLEndpointService) {
	r = AccountURLEndpointService{}
	r.Options = opts
	return
}

// **Note:** This API is currently in beta.
// Creates a new URL‑endpoint and returns the resulting object.
func (r *AccountURLEndpointService) New(ctx context.Context, body AccountURLEndpointNewParams, opts ...option.RequestOption) (res *AccountURLEndpointNewResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/accounts/url-endpoints"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Updates the URL‑endpoint identified by `id` and returns the updated object.
func (r *AccountURLEndpointService) Update(ctx context.Context, id string, body AccountURLEndpointUpdateParams, opts ...option.RequestOption) (res *AccountURLEndpointUpdateResponse, err error) {
	opts = append(r.Options[:], opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPut, path, body, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Returns an array of all URL‑endpoints configured including the default
// URL-endpoint generated by ImageKit during account creation.
func (r *AccountURLEndpointService) List(ctx context.Context, opts ...option.RequestOption) (res *[]AccountURLEndpointListResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/accounts/url-endpoints"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Deletes the URL‑endpoint identified by `id`. You cannot delete the default
// URL‑endpoint created by ImageKit during account creation.
func (r *AccountURLEndpointService) Delete(ctx context.Context, id string, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, nil, nil, opts...)
	return
}

// **Note:** This API is currently in beta.
// Retrieves the URL‑endpoint identified by `id`.
func (r *AccountURLEndpointService) Get(ctx context.Context, id string, opts ...option.RequestOption) (res *AccountURLEndpointGetResponse, err error) {
	opts = append(r.Options[:], opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// URL‑endpoint object as returned by the API.
type AccountURLEndpointNewResponse struct {
	// Unique identifier for the URL-endpoint. This is generated by ImageKit when you
	// create a new URL-endpoint. For the default URL-endpoint, this is always
	// `default`.
	ID string `json:"id,required"`
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix string `json:"urlPrefix,required"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointNewResponseURLRewriterUnion `json:"urlRewriter"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Description respjson.Field
		Origins     respjson.Field
		URLPrefix   respjson.Field
		URLRewriter respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointNewResponse) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointNewResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// AccountURLEndpointNewResponseURLRewriterUnion contains all possible properties
// and values from [AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter],
// [AccountURLEndpointNewResponseURLRewriterImgixURLRewriter],
// [AccountURLEndpointNewResponseURLRewriterAkamaiURLRewriter].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type AccountURLEndpointNewResponseURLRewriterUnion struct {
	// This field is from variant
	// [AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter].
	PreserveAssetDeliveryTypes bool   `json:"preserveAssetDeliveryTypes"`
	Type                       string `json:"type"`
	JSON                       struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		raw                        string
	} `json:"-"`
}

func (u AccountURLEndpointNewResponseURLRewriterUnion) AsCloudinaryURLRewriter() (v AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointNewResponseURLRewriterUnion) AsImgixURLRewriter() (v AccountURLEndpointNewResponseURLRewriterImgixURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointNewResponseURLRewriterUnion) AsAkamaiURLRewriter() (v AccountURLEndpointNewResponseURLRewriterAkamaiURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u AccountURLEndpointNewResponseURLRewriterUnion) RawJSON() string { return u.JSON.raw }

func (r *AccountURLEndpointNewResponseURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes bool                `json:"preserveAssetDeliveryTypes,required"`
	Type                       constant.Cloudinary `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointNewResponseURLRewriterCloudinaryURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointNewResponseURLRewriterImgixURLRewriter struct {
	Type constant.Imgix `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointNewResponseURLRewriterImgixURLRewriter) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointNewResponseURLRewriterImgixURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointNewResponseURLRewriterAkamaiURLRewriter struct {
	Type constant.Akamai `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointNewResponseURLRewriterAkamaiURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointNewResponseURLRewriterAkamaiURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// URL‑endpoint object as returned by the API.
type AccountURLEndpointUpdateResponse struct {
	// Unique identifier for the URL-endpoint. This is generated by ImageKit when you
	// create a new URL-endpoint. For the default URL-endpoint, this is always
	// `default`.
	ID string `json:"id,required"`
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix string `json:"urlPrefix,required"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointUpdateResponseURLRewriterUnion `json:"urlRewriter"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Description respjson.Field
		Origins     respjson.Field
		URLPrefix   respjson.Field
		URLRewriter respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointUpdateResponse) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointUpdateResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// AccountURLEndpointUpdateResponseURLRewriterUnion contains all possible
// properties and values from
// [AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter],
// [AccountURLEndpointUpdateResponseURLRewriterImgixURLRewriter],
// [AccountURLEndpointUpdateResponseURLRewriterAkamaiURLRewriter].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type AccountURLEndpointUpdateResponseURLRewriterUnion struct {
	// This field is from variant
	// [AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter].
	PreserveAssetDeliveryTypes bool   `json:"preserveAssetDeliveryTypes"`
	Type                       string `json:"type"`
	JSON                       struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		raw                        string
	} `json:"-"`
}

func (u AccountURLEndpointUpdateResponseURLRewriterUnion) AsCloudinaryURLRewriter() (v AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointUpdateResponseURLRewriterUnion) AsImgixURLRewriter() (v AccountURLEndpointUpdateResponseURLRewriterImgixURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointUpdateResponseURLRewriterUnion) AsAkamaiURLRewriter() (v AccountURLEndpointUpdateResponseURLRewriterAkamaiURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u AccountURLEndpointUpdateResponseURLRewriterUnion) RawJSON() string { return u.JSON.raw }

func (r *AccountURLEndpointUpdateResponseURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes bool                `json:"preserveAssetDeliveryTypes,required"`
	Type                       constant.Cloudinary `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointUpdateResponseURLRewriterCloudinaryURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointUpdateResponseURLRewriterImgixURLRewriter struct {
	Type constant.Imgix `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointUpdateResponseURLRewriterImgixURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointUpdateResponseURLRewriterImgixURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointUpdateResponseURLRewriterAkamaiURLRewriter struct {
	Type constant.Akamai `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointUpdateResponseURLRewriterAkamaiURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointUpdateResponseURLRewriterAkamaiURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// URL‑endpoint object as returned by the API.
type AccountURLEndpointListResponse struct {
	// Unique identifier for the URL-endpoint. This is generated by ImageKit when you
	// create a new URL-endpoint. For the default URL-endpoint, this is always
	// `default`.
	ID string `json:"id,required"`
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix string `json:"urlPrefix,required"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointListResponseURLRewriterUnion `json:"urlRewriter"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Description respjson.Field
		Origins     respjson.Field
		URLPrefix   respjson.Field
		URLRewriter respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointListResponse) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// AccountURLEndpointListResponseURLRewriterUnion contains all possible properties
// and values from
// [AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter],
// [AccountURLEndpointListResponseURLRewriterImgixURLRewriter],
// [AccountURLEndpointListResponseURLRewriterAkamaiURLRewriter].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type AccountURLEndpointListResponseURLRewriterUnion struct {
	// This field is from variant
	// [AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter].
	PreserveAssetDeliveryTypes bool   `json:"preserveAssetDeliveryTypes"`
	Type                       string `json:"type"`
	JSON                       struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		raw                        string
	} `json:"-"`
}

func (u AccountURLEndpointListResponseURLRewriterUnion) AsCloudinaryURLRewriter() (v AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointListResponseURLRewriterUnion) AsImgixURLRewriter() (v AccountURLEndpointListResponseURLRewriterImgixURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointListResponseURLRewriterUnion) AsAkamaiURLRewriter() (v AccountURLEndpointListResponseURLRewriterAkamaiURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u AccountURLEndpointListResponseURLRewriterUnion) RawJSON() string { return u.JSON.raw }

func (r *AccountURLEndpointListResponseURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes bool                `json:"preserveAssetDeliveryTypes,required"`
	Type                       constant.Cloudinary `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointListResponseURLRewriterCloudinaryURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointListResponseURLRewriterImgixURLRewriter struct {
	Type constant.Imgix `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointListResponseURLRewriterImgixURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointListResponseURLRewriterImgixURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointListResponseURLRewriterAkamaiURLRewriter struct {
	Type constant.Akamai `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointListResponseURLRewriterAkamaiURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointListResponseURLRewriterAkamaiURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// URL‑endpoint object as returned by the API.
type AccountURLEndpointGetResponse struct {
	// Unique identifier for the URL-endpoint. This is generated by ImageKit when you
	// create a new URL-endpoint. For the default URL-endpoint, this is always
	// `default`.
	ID string `json:"id,required"`
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix string `json:"urlPrefix,required"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointGetResponseURLRewriterUnion `json:"urlRewriter"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Description respjson.Field
		Origins     respjson.Field
		URLPrefix   respjson.Field
		URLRewriter respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointGetResponse) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointGetResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// AccountURLEndpointGetResponseURLRewriterUnion contains all possible properties
// and values from [AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter],
// [AccountURLEndpointGetResponseURLRewriterImgixURLRewriter],
// [AccountURLEndpointGetResponseURLRewriterAkamaiURLRewriter].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type AccountURLEndpointGetResponseURLRewriterUnion struct {
	// This field is from variant
	// [AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter].
	PreserveAssetDeliveryTypes bool   `json:"preserveAssetDeliveryTypes"`
	Type                       string `json:"type"`
	JSON                       struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		raw                        string
	} `json:"-"`
}

func (u AccountURLEndpointGetResponseURLRewriterUnion) AsCloudinaryURLRewriter() (v AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointGetResponseURLRewriterUnion) AsImgixURLRewriter() (v AccountURLEndpointGetResponseURLRewriterImgixURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u AccountURLEndpointGetResponseURLRewriterUnion) AsAkamaiURLRewriter() (v AccountURLEndpointGetResponseURLRewriterAkamaiURLRewriter) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u AccountURLEndpointGetResponseURLRewriterUnion) RawJSON() string { return u.JSON.raw }

func (r *AccountURLEndpointGetResponseURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes bool                `json:"preserveAssetDeliveryTypes,required"`
	Type                       constant.Cloudinary `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointGetResponseURLRewriterCloudinaryURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointGetResponseURLRewriterImgixURLRewriter struct {
	Type constant.Imgix `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointGetResponseURLRewriterImgixURLRewriter) RawJSON() string { return r.JSON.raw }
func (r *AccountURLEndpointGetResponseURLRewriterImgixURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointGetResponseURLRewriterAkamaiURLRewriter struct {
	Type constant.Akamai `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AccountURLEndpointGetResponseURLRewriterAkamaiURLRewriter) RawJSON() string {
	return r.JSON.raw
}
func (r *AccountURLEndpointGetResponseURLRewriterAkamaiURLRewriter) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointNewParams struct {
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix param.Opt[string] `json:"urlPrefix,omitzero"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,omitzero"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointNewParamsURLRewriterUnion `json:"urlRewriter,omitzero"`
	paramObj
}

func (r AccountURLEndpointNewParams) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointNewParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointNewParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Only one field can be non-zero.
//
// Use [param.IsOmitted] to confirm if a field is set.
type AccountURLEndpointNewParamsURLRewriterUnion struct {
	OfCloudinary *AccountURLEndpointNewParamsURLRewriterCloudinary `json:",omitzero,inline"`
	OfImgix      *AccountURLEndpointNewParamsURLRewriterImgix      `json:",omitzero,inline"`
	OfAkamai     *AccountURLEndpointNewParamsURLRewriterAkamai     `json:",omitzero,inline"`
	paramUnion
}

func (u AccountURLEndpointNewParamsURLRewriterUnion) MarshalJSON() ([]byte, error) {
	return param.MarshalUnion(u, u.OfCloudinary, u.OfImgix, u.OfAkamai)
}
func (u *AccountURLEndpointNewParamsURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, u)
}

func (u *AccountURLEndpointNewParamsURLRewriterUnion) asAny() any {
	if !param.IsOmitted(u.OfCloudinary) {
		return u.OfCloudinary
	} else if !param.IsOmitted(u.OfImgix) {
		return u.OfImgix
	} else if !param.IsOmitted(u.OfAkamai) {
		return u.OfAkamai
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u AccountURLEndpointNewParamsURLRewriterUnion) GetPreserveAssetDeliveryTypes() *bool {
	if vt := u.OfCloudinary; vt != nil && vt.PreserveAssetDeliveryTypes.Valid() {
		return &vt.PreserveAssetDeliveryTypes.Value
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u AccountURLEndpointNewParamsURLRewriterUnion) GetType() *string {
	if vt := u.OfCloudinary; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfImgix; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfAkamai; vt != nil {
		return (*string)(&vt.Type)
	}
	return nil
}

func init() {
	apijson.RegisterUnion[AccountURLEndpointNewParamsURLRewriterUnion](
		"type",
		apijson.Discriminator[AccountURLEndpointNewParamsURLRewriterCloudinary]("CLOUDINARY"),
		apijson.Discriminator[AccountURLEndpointNewParamsURLRewriterImgix]("IMGIX"),
		apijson.Discriminator[AccountURLEndpointNewParamsURLRewriterAkamai]("AKAMAI"),
	)
}

// The property Type is required.
type AccountURLEndpointNewParamsURLRewriterCloudinary struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes param.Opt[bool] `json:"preserveAssetDeliveryTypes,omitzero"`
	// This field can be elided, and will marshal its zero value as "CLOUDINARY".
	Type constant.Cloudinary `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointNewParamsURLRewriterCloudinary) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointNewParamsURLRewriterCloudinary
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointNewParamsURLRewriterCloudinary) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewAccountURLEndpointNewParamsURLRewriterImgix() AccountURLEndpointNewParamsURLRewriterImgix {
	return AccountURLEndpointNewParamsURLRewriterImgix{
		Type: "IMGIX",
	}
}

// This struct has a constant value, construct it with
// [NewAccountURLEndpointNewParamsURLRewriterImgix].
type AccountURLEndpointNewParamsURLRewriterImgix struct {
	Type constant.Imgix `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointNewParamsURLRewriterImgix) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointNewParamsURLRewriterImgix
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointNewParamsURLRewriterImgix) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewAccountURLEndpointNewParamsURLRewriterAkamai() AccountURLEndpointNewParamsURLRewriterAkamai {
	return AccountURLEndpointNewParamsURLRewriterAkamai{
		Type: "AKAMAI",
	}
}

// This struct has a constant value, construct it with
// [NewAccountURLEndpointNewParamsURLRewriterAkamai].
type AccountURLEndpointNewParamsURLRewriterAkamai struct {
	Type constant.Akamai `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointNewParamsURLRewriterAkamai) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointNewParamsURLRewriterAkamai
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointNewParamsURLRewriterAkamai) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointUpdateParams struct {
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix param.Opt[string] `json:"urlPrefix,omitzero"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,omitzero"`
	// Configuration for third-party URL rewriting.
	URLRewriter AccountURLEndpointUpdateParamsURLRewriterUnion `json:"urlRewriter,omitzero"`
	paramObj
}

func (r AccountURLEndpointUpdateParams) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointUpdateParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointUpdateParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Only one field can be non-zero.
//
// Use [param.IsOmitted] to confirm if a field is set.
type AccountURLEndpointUpdateParamsURLRewriterUnion struct {
	OfCloudinary *AccountURLEndpointUpdateParamsURLRewriterCloudinary `json:",omitzero,inline"`
	OfImgix      *AccountURLEndpointUpdateParamsURLRewriterImgix      `json:",omitzero,inline"`
	OfAkamai     *AccountURLEndpointUpdateParamsURLRewriterAkamai     `json:",omitzero,inline"`
	paramUnion
}

func (u AccountURLEndpointUpdateParamsURLRewriterUnion) MarshalJSON() ([]byte, error) {
	return param.MarshalUnion(u, u.OfCloudinary, u.OfImgix, u.OfAkamai)
}
func (u *AccountURLEndpointUpdateParamsURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, u)
}

func (u *AccountURLEndpointUpdateParamsURLRewriterUnion) asAny() any {
	if !param.IsOmitted(u.OfCloudinary) {
		return u.OfCloudinary
	} else if !param.IsOmitted(u.OfImgix) {
		return u.OfImgix
	} else if !param.IsOmitted(u.OfAkamai) {
		return u.OfAkamai
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u AccountURLEndpointUpdateParamsURLRewriterUnion) GetPreserveAssetDeliveryTypes() *bool {
	if vt := u.OfCloudinary; vt != nil && vt.PreserveAssetDeliveryTypes.Valid() {
		return &vt.PreserveAssetDeliveryTypes.Value
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u AccountURLEndpointUpdateParamsURLRewriterUnion) GetType() *string {
	if vt := u.OfCloudinary; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfImgix; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfAkamai; vt != nil {
		return (*string)(&vt.Type)
	}
	return nil
}

func init() {
	apijson.RegisterUnion[AccountURLEndpointUpdateParamsURLRewriterUnion](
		"type",
		apijson.Discriminator[AccountURLEndpointUpdateParamsURLRewriterCloudinary]("CLOUDINARY"),
		apijson.Discriminator[AccountURLEndpointUpdateParamsURLRewriterImgix]("IMGIX"),
		apijson.Discriminator[AccountURLEndpointUpdateParamsURLRewriterAkamai]("AKAMAI"),
	)
}

// The property Type is required.
type AccountURLEndpointUpdateParamsURLRewriterCloudinary struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes param.Opt[bool] `json:"preserveAssetDeliveryTypes,omitzero"`
	// This field can be elided, and will marshal its zero value as "CLOUDINARY".
	Type constant.Cloudinary `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointUpdateParamsURLRewriterCloudinary) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointUpdateParamsURLRewriterCloudinary
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointUpdateParamsURLRewriterCloudinary) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewAccountURLEndpointUpdateParamsURLRewriterImgix() AccountURLEndpointUpdateParamsURLRewriterImgix {
	return AccountURLEndpointUpdateParamsURLRewriterImgix{
		Type: "IMGIX",
	}
}

// This struct has a constant value, construct it with
// [NewAccountURLEndpointUpdateParamsURLRewriterImgix].
type AccountURLEndpointUpdateParamsURLRewriterImgix struct {
	Type constant.Imgix `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointUpdateParamsURLRewriterImgix) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointUpdateParamsURLRewriterImgix
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointUpdateParamsURLRewriterImgix) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewAccountURLEndpointUpdateParamsURLRewriterAkamai() AccountURLEndpointUpdateParamsURLRewriterAkamai {
	return AccountURLEndpointUpdateParamsURLRewriterAkamai{
		Type: "AKAMAI",
	}
}

// This struct has a constant value, construct it with
// [NewAccountURLEndpointUpdateParamsURLRewriterAkamai].
type AccountURLEndpointUpdateParamsURLRewriterAkamai struct {
	Type constant.Akamai `json:"type,required"`
	paramObj
}

func (r AccountURLEndpointUpdateParamsURLRewriterAkamai) MarshalJSON() (data []byte, err error) {
	type shadow AccountURLEndpointUpdateParamsURLRewriterAkamai
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AccountURLEndpointUpdateParamsURLRewriterAkamai) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}
