// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package imagekit

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/imagekit-developer/imagekit-go/internal/apijson"
	shimjson "github.com/imagekit-developer/imagekit-go/internal/encoding/json"
	"github.com/imagekit-developer/imagekit-go/internal/requestconfig"
	"github.com/imagekit-developer/imagekit-go/option"
	"github.com/imagekit-developer/imagekit-go/packages/param"
	"github.com/imagekit-developer/imagekit-go/packages/respjson"
	"github.com/imagekit-developer/imagekit-go/shared/constant"
)

// AccountURLEndpointService contains methods and other services that help with
// interacting with the ImageKit API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAccountURLEndpointService] method instead.
type AccountURLEndpointService struct {
	Options []option.RequestOption
}

// NewAccountURLEndpointService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewAccountURLEndpointService(opts ...option.RequestOption) (r AccountURLEndpointService) {
	r = AccountURLEndpointService{}
	r.Options = opts
	return
}

// **Note:** This API is currently in beta.
// Creates a new URL‑endpoint and returns the resulting object.
func (r *AccountURLEndpointService) New(ctx context.Context, body AccountURLEndpointNewParams, opts ...option.RequestOption) (res *URLEndpointResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/accounts/url-endpoints"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Updates the URL‑endpoint identified by `id` and returns the updated object.
func (r *AccountURLEndpointService) Update(ctx context.Context, id string, body AccountURLEndpointUpdateParams, opts ...option.RequestOption) (res *URLEndpointResponse, err error) {
	opts = append(r.Options[:], opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPut, path, body, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Returns an array of all URL‑endpoints configured including the default
// URL-endpoint generated by ImageKit during account creation.
func (r *AccountURLEndpointService) List(ctx context.Context, opts ...option.RequestOption) (res *[]URLEndpointResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/accounts/url-endpoints"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// **Note:** This API is currently in beta.
// Deletes the URL‑endpoint identified by `id`. You cannot delete the default
// URL‑endpoint created by ImageKit during account creation.
func (r *AccountURLEndpointService) Delete(ctx context.Context, id string, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, nil, nil, opts...)
	return
}

// **Note:** This API is currently in beta.
// Retrieves the URL‑endpoint identified by `id`.
func (r *AccountURLEndpointService) Get(ctx context.Context, id string, opts ...option.RequestOption) (res *URLEndpointResponse, err error) {
	opts = append(r.Options[:], opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("v1/accounts/url-endpoints/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// Schema for URL endpoint resource.
//
// The property Description is required.
type URLEndpointRequestParam struct {
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix param.Opt[string] `json:"urlPrefix,omitzero"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,omitzero"`
	// Configuration for third-party URL rewriting.
	URLRewriter URLEndpointRequestURLRewriterUnionParam `json:"urlRewriter,omitzero"`
	paramObj
}

func (r URLEndpointRequestParam) MarshalJSON() (data []byte, err error) {
	type shadow URLEndpointRequestParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *URLEndpointRequestParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Only one field can be non-zero.
//
// Use [param.IsOmitted] to confirm if a field is set.
type URLEndpointRequestURLRewriterUnionParam struct {
	OfCloudinary *URLEndpointRequestURLRewriterCloudinaryParam `json:",omitzero,inline"`
	OfImgix      *URLEndpointRequestURLRewriterImgixParam      `json:",omitzero,inline"`
	OfAkamai     *URLEndpointRequestURLRewriterAkamaiParam     `json:",omitzero,inline"`
	paramUnion
}

func (u URLEndpointRequestURLRewriterUnionParam) MarshalJSON() ([]byte, error) {
	return param.MarshalUnion(u, u.OfCloudinary, u.OfImgix, u.OfAkamai)
}
func (u *URLEndpointRequestURLRewriterUnionParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, u)
}

func (u *URLEndpointRequestURLRewriterUnionParam) asAny() any {
	if !param.IsOmitted(u.OfCloudinary) {
		return u.OfCloudinary
	} else if !param.IsOmitted(u.OfImgix) {
		return u.OfImgix
	} else if !param.IsOmitted(u.OfAkamai) {
		return u.OfAkamai
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u URLEndpointRequestURLRewriterUnionParam) GetPreserveAssetDeliveryTypes() *bool {
	if vt := u.OfCloudinary; vt != nil && vt.PreserveAssetDeliveryTypes.Valid() {
		return &vt.PreserveAssetDeliveryTypes.Value
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u URLEndpointRequestURLRewriterUnionParam) GetType() *string {
	if vt := u.OfCloudinary; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfImgix; vt != nil {
		return (*string)(&vt.Type)
	} else if vt := u.OfAkamai; vt != nil {
		return (*string)(&vt.Type)
	}
	return nil
}

func init() {
	apijson.RegisterUnion[URLEndpointRequestURLRewriterUnionParam](
		"type",
		apijson.Discriminator[URLEndpointRequestURLRewriterCloudinaryParam]("CLOUDINARY"),
		apijson.Discriminator[URLEndpointRequestURLRewriterImgixParam]("IMGIX"),
		apijson.Discriminator[URLEndpointRequestURLRewriterAkamaiParam]("AKAMAI"),
	)
}

// The property Type is required.
type URLEndpointRequestURLRewriterCloudinaryParam struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes param.Opt[bool] `json:"preserveAssetDeliveryTypes,omitzero"`
	// This field can be elided, and will marshal its zero value as "CLOUDINARY".
	Type constant.Cloudinary `json:"type,required"`
	paramObj
}

func (r URLEndpointRequestURLRewriterCloudinaryParam) MarshalJSON() (data []byte, err error) {
	type shadow URLEndpointRequestURLRewriterCloudinaryParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *URLEndpointRequestURLRewriterCloudinaryParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewURLEndpointRequestURLRewriterImgixParam() URLEndpointRequestURLRewriterImgixParam {
	return URLEndpointRequestURLRewriterImgixParam{
		Type: "IMGIX",
	}
}

// This struct has a constant value, construct it with
// [NewURLEndpointRequestURLRewriterImgixParam].
type URLEndpointRequestURLRewriterImgixParam struct {
	Type constant.Imgix `json:"type,required"`
	paramObj
}

func (r URLEndpointRequestURLRewriterImgixParam) MarshalJSON() (data []byte, err error) {
	type shadow URLEndpointRequestURLRewriterImgixParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *URLEndpointRequestURLRewriterImgixParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func NewURLEndpointRequestURLRewriterAkamaiParam() URLEndpointRequestURLRewriterAkamaiParam {
	return URLEndpointRequestURLRewriterAkamaiParam{
		Type: "AKAMAI",
	}
}

// This struct has a constant value, construct it with
// [NewURLEndpointRequestURLRewriterAkamaiParam].
type URLEndpointRequestURLRewriterAkamaiParam struct {
	Type constant.Akamai `json:"type,required"`
	paramObj
}

func (r URLEndpointRequestURLRewriterAkamaiParam) MarshalJSON() (data []byte, err error) {
	type shadow URLEndpointRequestURLRewriterAkamaiParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *URLEndpointRequestURLRewriterAkamaiParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// URL‑endpoint object as returned by the API.
type URLEndpointResponse struct {
	// Unique identifier for the URL-endpoint. This is generated by ImageKit when you
	// create a new URL-endpoint. For the default URL-endpoint, this is always
	// `default`.
	ID string `json:"id,required"`
	// Description of the URL endpoint.
	Description string `json:"description,required"`
	// Ordered list of origin IDs to try when the file isn’t in the Media Library;
	// ImageKit checks them in the sequence provided. Origin must be created before it
	// can be used in a URL endpoint.
	Origins []string `json:"origins,required"`
	// Path segment appended to your base URL to form the endpoint (letters, digits,
	// and hyphens only — or empty for the default endpoint).
	URLPrefix string `json:"urlPrefix,required"`
	// Configuration for third-party URL rewriting.
	URLRewriter URLEndpointResponseURLRewriterUnion `json:"urlRewriter"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Description respjson.Field
		Origins     respjson.Field
		URLPrefix   respjson.Field
		URLRewriter respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r URLEndpointResponse) RawJSON() string { return r.JSON.raw }
func (r *URLEndpointResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// URLEndpointResponseURLRewriterUnion contains all possible properties and values
// from [URLEndpointResponseURLRewriterCloudinary],
// [URLEndpointResponseURLRewriterImgix], [URLEndpointResponseURLRewriterAkamai].
//
// Use the [URLEndpointResponseURLRewriterUnion.AsAny] method to switch on the
// variant.
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type URLEndpointResponseURLRewriterUnion struct {
	// This field is from variant [URLEndpointResponseURLRewriterCloudinary].
	PreserveAssetDeliveryTypes bool `json:"preserveAssetDeliveryTypes"`
	// Any of "CLOUDINARY", "IMGIX", "AKAMAI".
	Type string `json:"type"`
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		raw                        string
	} `json:"-"`
}

// anyURLEndpointResponseURLRewriter is implemented by each variant of
// [URLEndpointResponseURLRewriterUnion] to add type safety for the return type of
// [URLEndpointResponseURLRewriterUnion.AsAny]
type anyURLEndpointResponseURLRewriter interface {
	implURLEndpointResponseURLRewriterUnion()
}

func (URLEndpointResponseURLRewriterCloudinary) implURLEndpointResponseURLRewriterUnion() {}
func (URLEndpointResponseURLRewriterImgix) implURLEndpointResponseURLRewriterUnion()      {}
func (URLEndpointResponseURLRewriterAkamai) implURLEndpointResponseURLRewriterUnion()     {}

// Use the following switch statement to find the correct variant
//
//	switch variant := URLEndpointResponseURLRewriterUnion.AsAny().(type) {
//	case imagekit.URLEndpointResponseURLRewriterCloudinary:
//	case imagekit.URLEndpointResponseURLRewriterImgix:
//	case imagekit.URLEndpointResponseURLRewriterAkamai:
//	default:
//	  fmt.Errorf("no variant present")
//	}
func (u URLEndpointResponseURLRewriterUnion) AsAny() anyURLEndpointResponseURLRewriter {
	switch u.Type {
	case "CLOUDINARY":
		return u.AsCloudinary()
	case "IMGIX":
		return u.AsImgix()
	case "AKAMAI":
		return u.AsAkamai()
	}
	return nil
}

func (u URLEndpointResponseURLRewriterUnion) AsCloudinary() (v URLEndpointResponseURLRewriterCloudinary) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u URLEndpointResponseURLRewriterUnion) AsImgix() (v URLEndpointResponseURLRewriterImgix) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u URLEndpointResponseURLRewriterUnion) AsAkamai() (v URLEndpointResponseURLRewriterAkamai) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u URLEndpointResponseURLRewriterUnion) RawJSON() string { return u.JSON.raw }

func (r *URLEndpointResponseURLRewriterUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type URLEndpointResponseURLRewriterCloudinary struct {
	// Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
	PreserveAssetDeliveryTypes bool                `json:"preserveAssetDeliveryTypes,required"`
	Type                       constant.Cloudinary `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PreserveAssetDeliveryTypes respjson.Field
		Type                       respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r URLEndpointResponseURLRewriterCloudinary) RawJSON() string { return r.JSON.raw }
func (r *URLEndpointResponseURLRewriterCloudinary) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type URLEndpointResponseURLRewriterImgix struct {
	Type constant.Imgix `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r URLEndpointResponseURLRewriterImgix) RawJSON() string { return r.JSON.raw }
func (r *URLEndpointResponseURLRewriterImgix) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type URLEndpointResponseURLRewriterAkamai struct {
	Type constant.Akamai `json:"type,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r URLEndpointResponseURLRewriterAkamai) RawJSON() string { return r.JSON.raw }
func (r *URLEndpointResponseURLRewriterAkamai) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AccountURLEndpointNewParams struct {
	// Schema for URL endpoint resource.
	URLEndpointRequest URLEndpointRequestParam
	paramObj
}

func (r AccountURLEndpointNewParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.URLEndpointRequest)
}
func (r *AccountURLEndpointNewParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.URLEndpointRequest)
}

type AccountURLEndpointUpdateParams struct {
	// Schema for URL endpoint resource.
	URLEndpointRequest URLEndpointRequestParam
	paramObj
}

func (r AccountURLEndpointUpdateParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.URLEndpointRequest)
}
func (r *AccountURLEndpointUpdateParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.URLEndpointRequest)
}
